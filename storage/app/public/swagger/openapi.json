{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "email" : "kosolapus@gmail.com",
      "name" : "Mike",
      "url" : "http://kosolapus.ddns.net/"
    },
    "description" : "API для будущей GroomCRM или назовите ее уже как-нибудь. На этой странице расписаны основные эндпоинты,\nпо которым можно получить данные из базы данных (или положить их туда, если будет такая возможность). Также здесь\nможно будет протестировать эти самые эндпоинты, посмотреть ответы и всякое такое.\n\n*v1.0.4*: добавлены фильтры по датам, добавлено поле телефона для мастеров (для смс-оповещений), добавлено поле\npush_device_id для отправки пушей на телефон.\n",
    "license" : {
      "name" : "MIT"
    },
    "title" : "Groomer Service",
    "version" : "1.0.4"
  },
  "servers" : [ {
    "url" : "http://kosolapus.ddns.net/api/v1"
  } ],
  "tags" : [ {
    "name" : "OAuth"
  }, {
    "description" : "Если что, тут речь не про клиентов грумеров,\nа про самих грумеров - клиенты этого приложения именно они.\nПриложение клиента может логиниться в сервисе двухфакторной аутентификации.\n",
    "name" : "Client"
  }, {
    "description" : "Управление мастерами - добавление, удаление, редактирование и все такое\n",
    "name" : "Master"
  }, {
    "description" : "Отсюда управляются сами услуги - можно создать новые,\nполучить старые или обновить что-то из услуг.\n",
    "name" : "Service"
  }, {
    "description" : "Возможно, правильнее было бы назвать это \"Booking\". Основной\nраздел для работы с расписанием мастеров\n",
    "name" : "Order"
  }, {
    "description" : "Управление акциями\n",
    "name" : "Promotion"
  }, {
    "description" : "Работа с пушами. Не уверен, что этому вообще место в апи есть,\nно оставлю, пусть пока будет\n",
    "name" : "Push"
  }, {
    "description" : "Календари труженников когтеточки и ножниц\n",
    "name" : "WorkingDiapason"
  } ],
  "paths" : {
    "/oauth/client/login" : {
      "post" : {
        "description" : "Эндпоинт для авторизации клиента\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "example" : {
                "login" : "benjamin93@hotmail.com",
                "password" : "password"
              },
              "schema" : {
                "type" : "object"
              }
            }
          },
          "description" : "Аутентифицирует клиента - салон или частного грумера",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bearer"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "Аутентифицирует клиента - салон или частного грумера\n",
        "tags" : [ "OAuth" ]
      }
    },
    "/oauth/master/login" : {
      "post" : {
        "description" : "Эндпоинт для авторизации Мастера\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "example" : {
                "login" : "libbie15@hotmail.com",
                "password" : "password"
              },
              "schema" : {
                "type" : "object"
              }
            }
          },
          "description" : "Аутентифицирует клиента - салон или частного грумера",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bearer"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "Аутентифицирует клиента - салон или частного грумера\n",
        "tags" : [ "OAuth" ]
      }
    },
    "/client" : {
      "get" : {
        "description" : "Возвращает массив из Клиентов при их существовании или пустой\nмассив, если клиентов нет. Требует токен с уровнем прав как\nминимум администратора сервиса\n",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Client"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuthAdmin" : [ ]
        } ],
        "summary" : "Возвращает список клиентов массивом\n",
        "tags" : [ "Client" ]
      },
      "post" : {
        "description" : "Создает нового Клиента. Для работы с этим эндпоинтом\nтребуется доступ как минимум администратора сервиса\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Client"
              }
            }
          },
          "description" : "Store *Client* entity",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuthAdmin" : [ ]
        } ],
        "summary" : "Создает нового клиента\n",
        "tags" : [ "Client" ]
      }
    },
    "/client/{client}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuthAdmin" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Client" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Client"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Client" ]
      },
      "parameters" : [ {
        "description" : "Id requested Client",
        "example" : 1,
        "in" : "path",
        "name" : "client",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Client"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuthAdmin" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Client" ]
      }
    },
    "/master" : {
      "get" : {
        "description" : "Store *Master* entity",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Id клиента, которому принадлежит мастер",
          "in" : "query",
          "name" : "client_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Master" ]
      },
      "post" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "allOf" : [ {
                  "properties" : {
                    "image_upload" : {
                      "format" : "binary",
                      "nullable" : false,
                      "type" : "string"
                    },
                    "name" : {
                      "nullable" : false,
                      "type" : "string"
                    },
                    "description" : {
                      "format" : "text",
                      "nullable" : true,
                      "type" : "string"
                    },
                    "phone" : {
                      "nullable" : true,
                      "type" : "string"
                    }
                  },
                  "required" : [ "description", "image_upload", "name" ],
                  "type" : "object"
                } ]
              }
            }
          },
          "description" : "Store *Master* entity",
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Master"
                }
              }
            },
            "description" : "Успешно создано"
          },
          "422" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_422"
                }
              }
            },
            "description" : "Невозможно обработать запрос, произошла ошибка в процессе"
          },
          "401" : {
            "description" : "Не передан токен"
          },
          "403" : {
            "description" : "Нет прав для выполнения данного действия"
          },
          "5XX" : {
            "description" : "Ошибка на сервере. Не должно быть таких ответов, это плохой признак"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Master" ]
      }
    },
    "/master/{master}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Master" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Master"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Master" ]
      },
      "parameters" : [ {
        "description" : "Id requested Master",
        "example" : 1,
        "in" : "path",
        "name" : "master",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/Master"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Master" ]
      }
    },
    "/order" : {
      "get" : {
        "description" : "Store *Order* entity",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Order" ]
      },
      "post" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "description" : "Store *Order* entity",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Order" ]
      }
    },
    "/order/{order}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Order" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Order" ]
      },
      "parameters" : [ {
        "description" : "Id requested Order",
        "example" : 1,
        "in" : "path",
        "name" : "order",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Order" ]
      }
    },
    "/promotion" : {
      "get" : {
        "description" : "Store *Promotion* entity",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Id клиента, которому принадлежит мастер",
          "in" : "query",
          "name" : "client_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Начало периода",
          "in" : "query",
          "name" : "date_start",
          "required" : false,
          "schema" : {
            "format" : "datetime",
            "type" : "string"
          }
        }, {
          "description" : "Конец периода",
          "in" : "query",
          "name" : "date_end",
          "required" : false,
          "schema" : {
            "format" : "datetime",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Promotion" ]
      },
      "post" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Promotion"
              }
            }
          },
          "description" : "Store *Promotion* entity",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Promotion" ]
      }
    },
    "/promotion/{promotion}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Promotion" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Promotion"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Promotion" ]
      },
      "parameters" : [ {
        "description" : "Id requested Promotion",
        "example" : 1,
        "in" : "path",
        "name" : "promotion",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Promotion"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Promotion" ]
      }
    },
    "/push" : {
      "get" : {
        "description" : "Store *Push* entity",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Push" ]
      },
      "post" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Push"
              }
            }
          },
          "description" : "Store *Push* entity",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Push" ]
      }
    },
    "/push/{push}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Push" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Push"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Push" ]
      },
      "parameters" : [ {
        "description" : "Id requested Push",
        "example" : 1,
        "in" : "path",
        "name" : "push",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Push"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Push" ]
      }
    },
    "/service" : {
      "get" : {
        "description" : "Store *Service* entity",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Id клиента, которому принадлежит мастер",
          "in" : "query",
          "name" : "client_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Service" ]
      },
      "post" : {
        "description" : "",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/inline_object",
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "properties" : {
                  "name" : {
                    "description" : "Название Услуги",
                    "type" : "string"
                  },
                  "image_upload" : {
                    "description" : "Загружаемое изображение услуги",
                    "format" : "binary",
                    "type" : "string",
                    "writeOnly" : true
                  },
                  "service_type" : {
                    "description" : "Тип услуги - для кошек, для собак, для других",
                    "items" : {
                      "enum" : [ 0, 1, 2 ],
                      "format" : "tinyint",
                      "type" : "integer"
                    },
                    "type" : "array"
                  }
                },
                "required" : [ "image_upload", "name", "service_type" ],
                "type" : "object"
              }
            }
          },
          "description" : "Store *Service* entity",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Service" ]
      }
    },
    "/service/{service}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Service" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            },
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "Service" ]
      },
      "parameters" : [ {
        "description" : "Id requested Service",
        "example" : 1,
        "in" : "path",
        "name" : "service",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Service"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "Service" ]
      }
    },
    "/working-diapason" : {
      "get" : {
        "description" : "Store *WorkingDiapason* entity",
        "parameters" : [ {
          "description" : "Как много элементов должно возвращаться за один запрос",
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 25,
            "type" : "integer"
          }
        }, {
          "description" : "Смещение от первого",
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "type" : "integer"
          }
        }, {
          "description" : "Id мастера",
          "in" : "query",
          "name" : "master_id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Если требуется только свободное время для записи",
          "in" : "query",
          "name" : "only_free",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Начало периода",
          "in" : "query",
          "name" : "date_start",
          "required" : false,
          "schema" : {
            "format" : "datetime",
            "type" : "string"
          }
        }, {
          "description" : "Конец периода",
          "in" : "query",
          "name" : "date_end",
          "required" : false,
          "schema" : {
            "format" : "datetime",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "summary" : "",
        "tags" : [ "WorkingDiapason" ]
      },
      "post" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkingDiapason"
              }
            }
          },
          "description" : "Store *WorkingDiapason* entity",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        },
        "security" : [ {
          "bearerAuthMaster" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "WorkingDiapason" ]
      }
    },
    "/working-diapason/{working-diapason}" : {
      "delete" : {
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Ошибка"
          },
          "4XX" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Ошибка"
          }
        },
        "security" : [ {
          "bearerAuthMaster" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "WorkingDiapason" ]
      },
      "get" : {
        "description" : "",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkingDiapason"
                }
              }
            },
            "description" : "Ok"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Ошибка"
          },
          "4XX" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Ошибка"
          }
        },
        "summary" : "",
        "tags" : [ "WorkingDiapason" ]
      },
      "parameters" : [ {
        "description" : "Id requested WorkingDiapason",
        "example" : 1,
        "in" : "path",
        "name" : "working-diapason",
        "required" : true,
        "schema" : {
          "minimum" : 1,
          "type" : "integer"
        }
      } ],
      "patch" : {
        "description" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkingDiapason"
              }
            }
          },
          "description" : "Optional description in *Markdown*",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Ошибка"
          },
          "4XX" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Ошибка"
          }
        },
        "security" : [ {
          "bearerAuthMaster" : [ ]
        } ],
        "summary" : "",
        "tags" : [ "WorkingDiapason" ]
      }
    }
  },
  "components" : {
    "requestBodies" : {
      "inline_object" : {
        "content" : {
          "multipart/form-data" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object"
            }
          }
        },
        "required" : true
      }
    },
    "schemas" : {
      "Service" : {
        "properties" : {
          "id" : {
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          },
          "name" : {
            "description" : "Название Услуги",
            "type" : "string"
          },
          "image_upload" : {
            "description" : "Загружаемое изображение услуги",
            "format" : "binary",
            "type" : "string",
            "writeOnly" : true
          },
          "service_type" : {
            "items" : {
              "description" : "Тип услуги - для кошек, для собак, для других",
              "enum" : [ 0, 1, 2 ],
              "format" : "tinyint",
              "type" : "integer"
            },
            "type" : "array"
          },
          "image" : {
            "description" : "Изображение услуги",
            "format" : "url",
            "readOnly" : true,
            "type" : "string"
          },
          "price" : {
            "description" : "Цена на услугу",
            "format" : "int64",
            "type" : "integer"
          },
          "text" : {
            "description" : "Описание услуги",
            "type" : "string"
          }
        },
        "required" : [ "image_upload", "name", "service_type" ],
        "type" : "object"
      },
      "Client" : {
        "description" : "Клиент - это пользователь приложения, частный грумер или контора.\nЭто определяется полем *type*, и влиять это может, к примеру,\nна ценник за работу сервиса + возможности по добавлению мастеров\n(для частника ограничение в 1 мастера).\nУ клиента может быть свое настраиваемое приложение, в котором кастомно могут указываться\nнекоторые настройки. Какие? А хрен его знает, народ упоролся и\nрассказывает про формы в админке, а не про типы данных.\nИ я хз, как форматировать поле *settings*, какой оно может быть длины и все такое.\nОднако, определенно у каждого клиента должно быть свое наименование (поле *name*) и какой-то логотип (поле *image*)\n(в крайнем случае, хотя бы просто фотка грумера)\n",
        "properties" : {
          "id" : {
            "description" : "Уникальный идентификатор Клиента",
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          },
          "password" : {
            "description" : "Пароль клиента",
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          },
          "type" : {
            "description" : "Тип клиента. 0 - частный мастер, 1 - компания",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Название Клиента",
            "type" : "string"
          },
          "image" : {
            "description" : "Логотип клиента",
            "format" : "binary",
            "nullable" : true,
            "type" : "string"
          },
          "settings" : {
            "type" : "object"
          }
        },
        "type" : "object"
      },
      "Pet" : {
        "description" : "Иногда лохматая, иногда когтистая тварь, чаще всего с лапами, ушами и хвостом.\nКонкретная особь обладает следующими признаками:\n1. Скорость обработки из состояния \"ну мы пришли\" в состояние \"у-ти какой лапочка\"\n2. Позывной\n3. ???\n",
        "properties" : {
          "id" : {
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "average_time_work" : {
            "nullable" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Promotion" : {
        "description" : "TODO: Осмысленное описание объекта акций\n",
        "properties" : {
          "id" : {
            "description" : "Уникальный идентификатор Акции",
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          },
          "title" : {
            "description" : "Заголовок Акции",
            "type" : "string"
          },
          "text" : {
            "description" : "Текст Акции, поддерживает разметку",
            "type" : "string"
          },
          "date_start" : {
            "description" : "Дата начала акции",
            "format" : "datetime",
            "type" : "string"
          },
          "url" : {
            "description" : "Уникальный адрес акции для доступа с сайта",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Order" : {
        "description" : "Заказ, он же Бронирование - пока не знаю, как лучше назвать.\nРезервирование конкретного диапазона времени из доступных у конкретного мастера.\nЕсли за приложнием закреплена конкретная тварь с лапами, может\nпомочь с выбором времени, требуемого на ее обработку\n",
        "properties" : {
          "id" : {
            "description" : "Уникальный идентификатор Заказа",
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          },
          "working_diapason_start_id" : {
            "description" : "Ссылка на время начала процедуры",
            "format" : "int64",
            "type" : "integer"
          },
          "phone" : {
            "description" : "Телефон для связи",
            "type" : "string"
          },
          "email" : {
            "description" : "Email для связи",
            "nullable" : true,
            "type" : "string"
          },
          "pet_name" : {
            "description" : "Имя питомца",
            "type" : "string"
          },
          "owner_name" : {
            "description" : "Позывной владельца лохматой твари",
            "type" : "string"
          },
          "comment" : {
            "description" : "Поле комментария в форме заказа",
            "nullable" : true,
            "type" : "string"
          },
          "push_device_id" : {
            "description" : "OneSignal идентификатор устройства",
            "nullable" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Master" : {
        "description" : "Мастер - это непосредственный исполнитель услуги.\nРазные мастера могут предоставлять одну или несколько услуг из общего списка Клиента\nУ мастера есть расписание.\n",
        "properties" : {
          "id" : {
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          },
          "image" : {
            "format" : "url",
            "readOnly" : true,
            "type" : "string"
          },
          "image_upload" : {
            "format" : "binary",
            "type" : "string",
            "writeOnly" : true
          },
          "name" : {
            "nullable" : false,
            "type" : "string"
          },
          "phone" : {
            "nullable" : true,
            "type" : "string"
          },
          "description" : {
            "nullable" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Push" : {
        "description" : "TODO: Осмысленное описание объекта Пушей\n",
        "properties" : {
          "id" : {
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "WorkingDiapason" : {
        "properties" : {
          "id" : {
            "format" : "int64",
            "minimum" : 1,
            "nullable" : false,
            "type" : "integer"
          },
          "size" : {
            "format" : "time",
            "type" : "string"
          },
          "time_start" : {
            "format" : "datetime",
            "type" : "string"
          },
          "state" : {
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "Bearer" : {
        "description" : "Авторизационные токены.\n",
        "properties" : {
          "token_type" : {
            "description" : "Уникальный идентификатор Клиента",
            "readOnly" : true,
            "type" : "string"
          },
          "access_token" : {
            "description" : "Уникальный идентификатор Клиента",
            "readOnly" : true,
            "type" : "string"
          },
          "refresh_token" : {
            "description" : "Уникальный идентификатор Клиента",
            "readOnly" : true,
            "type" : "string"
          },
          "expires_in" : {
            "description" : "Уникальный идентификатор Клиента",
            "format" : "int64",
            "readOnly" : true,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "inline_response_422" : {
        "description" : "Сообщение об ошибке",
        "properties" : {
          "message" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "inline_object" : {
        "properties" : {
          "name" : {
            "description" : "Название Услуги",
            "type" : "string"
          },
          "image_upload" : {
            "description" : "Загружаемое изображение услуги",
            "format" : "binary",
            "type" : "string",
            "writeOnly" : true
          },
          "service_type" : {
            "description" : "Тип услуги - для кошек, для собак, для других",
            "items" : {
              "enum" : [ 0, 1, 2 ],
              "format" : "tinyint",
              "type" : "integer"
            },
            "type" : "array"
          }
        },
        "required" : [ "image_upload", "name", "service_type" ],
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      },
      "bearerAuthMaster" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      },
      "bearerAuthAdmin" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  }
}