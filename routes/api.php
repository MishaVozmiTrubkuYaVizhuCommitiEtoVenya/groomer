<?php

/**
 * Groomer Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

Route::post(
    '/oauth/client/login',
    function (Request $request) {
        $params = array(
            "client_id" => env('PASSPORT_CLIENT_ID'),
            "client_secret" => env('PASSPORT_CLIENT_SECRET'),
            "username" => $request->login,
            "password" => $request->password,
            "grant_type" => "password",
        );

        try {
            $client = new \GuzzleHttp\Client(
                [
                    // Base URI is used with relative requests
                    'base_uri' => 'http://kosolapus.ddns.net/',
                    // You can set any number of default request options.
                    'timeout' => 2.0,
                ]
            );
            $response = $client->request(
                'POST',
                '/oauth/token',
                [
                    'form_params' => $params
                ]
            );
        } catch (\Exception $e) {

        }


        return response($response->getBody() ?? "", $response->getStatusCode() ?? 422);
    }
);

Route::post(
    '/oauth/master/login',
    function (Request $request) {
        $params = array(
            "client_id" => env('PASSPORT_MASTER_ID'),
            "client_secret" => env('PASSPORT_MASTER_SECRET'),
            "username" => $request->login,
            "password" => $request->password,
            "grant_type" => "password",
        );
        $client = new \GuzzleHttp\Client(
            [
                // Base URI is used with relative requests
                'base_uri' => 'http://kosolapus.ddns.net/',
                // You can set any number of default request options.
                'timeout' => 2.0,
            ]
        );
        $response = $client->request(
            'POST',
            '/oauth/token',
            [
                'form_params' => $params
            ]
        );

        return response($response->getBody(), $response->getStatusCode());
    }
);

/**
 * get clientGet
 * Summary:
 * Notes: Store *Client* entity
 */
Route::get('/client', 'ClientController@index');


/**
 * post clientPost
 * Summary:
 * Notes:
 */
Route::post('/client', 'ClientController@store');
/**
 * delete clientClientDelete
 * Summary:
 * Notes:
 */
Route::delete('/client/{client}', 'ClientController@destroy');
/**
 * get clientClientGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/client/{client}', 'ClientController@show');
/**
 * patch clientClientPatch
 * Summary:
 * Notes:
 */
Route::patch('/client/{client}', 'ClientController@update');
/**
 * get masterGet
 * Summary:
 * Notes: Store *Master* entity
 */
Route::get('/client/{client}/master', 'MasterController@index');
/**
 * post masterPost
 * Summary:
 * Notes:
 */
Route::post('/client/{client}/master', 'MasterController@store');
/**
 * delete masterMasterDelete
 * Summary:
 * Notes:
 */
Route::delete('/client/{client}/master/{master}', 'MasterController@destroy');
/**
 * get masterMasterGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/client/{client}/master/{master}', 'MasterController@show');
/**
 * patch masterMasterPatch
 * Summary:
 * Notes:
 */
Route::patch('/client/{client}/master/{master}', 'MasterController@update');
/**
 * get orderGet
 * Summary:
 * Notes: Store *Order* entity
 */
Route::get('/client/{client}/order', 'OrderController@index');
/**
 * post orderPost
 * Summary:
 * Notes:
 */
Route::post('/client/{client}/order', 'OrderController@store');
/**
 * delete orderOrderDelete
 * Summary:
 * Notes:
 */
Route::delete('/client/{client}/order/{order}', 'OrderController@destroy');
/**
 * get orderOrderGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/client/{client}/order/{order}', 'OrderController@show');
/**
 * patch orderOrderPatch
 * Summary:
 * Notes:
 */
Route::patch('/client/{client}/order/{order}', 'OrderController@update');
/**
 * get promotionGet
 * Summary:
 * Notes: Store *Promotion* entity
 */
Route::get('/client/{client}/promotion', 'PromotionController@index');
/**
 * post promotionPost
 * Summary:
 * Notes:
 */
Route::post('/client/{client}/promotion', 'PromotionController@store');
/**
 * delete promotionPromotionDelete
 * Summary:
 * Notes:
 */
Route::delete('/client/{client}/promotion/{promotion}', 'PromotionController@destroy');
/**
 * get promotionPromotionGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/client/{client}/promotion/{promotion}', 'PromotionController@show');
/**
 * patch promotionPromotionPatch
 * Summary:
 * Notes:
 */
Route::patch('/client/{client}/promotion/{promotion}', 'PromotionController@update');
/**
 * get pushGet
 * Summary:
 * Notes: Store *Push* entity
 */
Route::get('/push', 'PushController@index');
/**
 * post pushPost
 * Summary:
 * Notes:
 */
Route::post('/push', 'PushController@store');
/**
 * delete pushPushDelete
 * Summary:
 * Notes:
 */
Route::delete('/push/{push}', 'PushController@destroy');
/**
 * get pushPushGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/push/{push}', 'PushController@show');
/**
 * patch pushPushPatch
 * Summary:
 * Notes:
 */
Route::patch('/push/{push}', 'PushController@update');
/**
 * get serviceGet
 * Summary:
 * Notes: Store *Service* entity
 */
Route::get('/client/{client}/service', 'ServiceController@index');
/**
 * post servicePost
 * Summary:
 * Notes:
 */
Route::post('/client/{client}/service', 'ServiceController@store');
/**
 * delete serviceServiceDelete
 * Summary:
 * Notes:
 */
Route::delete('/client/{client}/service/{service}', 'ServiceController@destroy');
/**
 * get serviceServiceGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/client/{client}/service/{service}', 'ServiceController@show');
/**
 * patch serviceServicePatch
 * Summary:
 * Notes:
 */
Route::patch('/client/{client}/service/{service}', 'ServiceController@update');
/**
 * get workingDiapasonGet
 * Summary:
 * Notes: Store *WorkingDiapason* entity
 */
Route::get('/client/{client}/master/{master}/working-diapason', 'WorkingDiapasonController@index');
/**
 * post workingDiapasonPost
 * Summary:
 * Notes:
 */
Route::post('/client/{client}/master/{master}/working-diapason', 'WorkingDiapasonController@store');
/**
 * delete workingDiapasonWorkingDiapasonDelete
 * Summary:
 * Notes:
 */
Route::delete('/client/{client}/master/{master}/working-diapason/{diapason}', 'WorkingDiapasonController@destroy');
/**
 * get workingDiapasonWorkingDiapasonGet
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
Route::get('/client/{client}/master/{master}/working-diapason/{diapason}', 'WorkingDiapasonController@show');
/**
 * patch workingDiapasonWorkingDiapasonPatch
 * Summary:
 * Notes:
 */
Route::patch('/client/{client}/master/{master}/working-diapason/{diapason}', 'WorkingDiapasonController@update');

Route::middleware('auth:api')->get(
    '/user',
    function (Request $request) {
        return $request->user();
    }
);
